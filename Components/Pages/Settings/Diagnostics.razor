@page "/settings/diagnostics"
@inject ILogBuffer LogBuffer

<h3>Diagnostics</h3>

<div class="toolbar">
    <button @onclick="Refresh">Refresh</button>
    <button @onclick="ShareAsync">Share Logs</button>
    <label style="margin-left:1rem;">
        <input type="checkbox" @bind="includeRenderer" />
        Include RenderTree.Renderer logs
    </label>
    <label style="margin-left:1rem;">
        <input type="checkbox" @bind="includeHttpClientDefault" />
        Include System.Net.Http.HttpClient.Default logs
    </label>
</div>

<p>Entries: @FilteredCount @lastRefreshedText</p>

<pre style="white-space:pre-wrap; max-height:60vh; overflow:auto; font-size:.8rem;">
@string.Join("\n", FilteredLines)
</pre>

@code {
    // All lines captured in buffer (unfiltered)
    List<string> allLines = new();
    DateTimeOffset lastRefreshed;
    bool includeRenderer = false;
    bool includeHttpClientDefault = false;

    protected override void OnInitialized()
    {
        Refresh();
    }

    void Refresh()
    {
        allLines = LogBuffer.Snapshot().ToList();
        lastRefreshed = DateTimeOffset.Now;
    }

    string lastRefreshedText => $"(updated {lastRefreshed:HH:mm:ss})";

    // View-time filtering (fast and simple)
    static bool IsRendererLine(string line) =>
        line?.Contains("Microsoft.AspNetCore.Components.RenderTree.Renderer", StringComparison.Ordinal) == true;

    static bool IsHttpClientDefaultLine(string line) =>
        // Matches both .LogicalHandler and .ClientHandler categories for the Default client
        line?.Contains("System.Net.Http.HttpClient.Default", StringComparison.Ordinal) == true;

    IEnumerable<string> FilteredLines =>
        allLines.Where(l =>
            (includeRenderer || !IsRendererLine(l)) &&
            (includeHttpClientDefault || !IsHttpClientDefaultLine(l)));

    int FilteredCount =>
        allLines.Count(l =>
            (includeRenderer || !IsRendererLine(l)) &&
            (includeHttpClientDefault || !IsHttpClientDefaultLine(l)));

    async Task ShareAsync()
    {
        var file = await LogBuffer.PersistAsync();
        await Share.Default.RequestAsync(new ShareFileRequest
        {
            Title = "App Logs",
            File = new ShareFile(file)
        });
    }
}