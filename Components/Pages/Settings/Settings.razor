@page "/settings"
@using MDTadusMod.Services
@using MDTadusMod.Data
@using System.Reflection
@using System.Text.Json.Serialization
@inject SettingsService SettingsManager
@inject NavigationManager Navigation
@implements IDisposable

<div class="table-container">
    <h1>Settings</h1>

    <div class="settings-section">
        <h2>Display Settings</h2>

        @foreach (var property in GetSettingsProperties())
        {
            <div class="setting-item">
                <label for="@property.Name">@GetSettingLabel(property)</label>
                <input type="checkbox"
                       id="@property.Name"
                       checked="@((bool)property.GetValue(SettingsManager.GlobalSettings))"
                       @onchange="(e) => UpdateGlobalSetting(property.Name, e.Value)" />
            </div>
        }
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        SettingsManager.OnChange += StateHasChanged;
    }

    private IEnumerable<PropertyInfo> GetSettingsProperties()
    {
        return typeof(GlobalSettings)
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p => p.CanRead && p.CanWrite && p.GetCustomAttribute<JsonIgnoreAttribute>() == null && p.PropertyType == typeof(bool));
    }

    private string GetSettingLabel(PropertyInfo property)
    {
        // Use the description from the attribute as the primary label text.
        var description = property.GetCustomAttribute<SettingDescriptionAttribute>()?.Description;
        if (!string.IsNullOrEmpty(description))
        {
            return description;
        }

        // Fallback for properties without a description attribute.
        return System.Text.RegularExpressions.Regex.Replace(property.Name, "(\\B[A-Z])", " $1");
    }

    private void UpdateGlobalSetting(string propertyName, object value)
    {
        if (value is bool boolValue)
        {
            SettingsManager.UpdateGlobalSetting(propertyName, boolValue);
        }
    }

    public void Dispose()
    {
        SettingsManager.OnChange -= StateHasChanged;
    }
}
