@page "/"
@page "/view-accounts"
@inject Services.AccountService AccountSvc
@inject Services.RotmgApiService RotmgApiSvc
@inject NavigationManager NavManager
@inject Services.SettingsService SettingsManager
@implements IDisposable

@if (accounts == null)
{
    <p><em>Loading...</em></p>
}
else if (!accounts.Any())
{
    <div class="no-accounts-container">
        <div class="fresh-user">
            <h1>Welcome to Muledump.NET</h1>
            <p>Your items and stat focused account manager for RotMG. View detailed stats for your characters and all items across your inventories.</p>
            <button @onclick="GoToAddAccount">Add Your First Account</button>
        </div>
    </div>
}
else
{
    <div class="account-list">
        @foreach (var account in accounts)
        {
            <AccountCard Account="@account"
                         AccountData="@(accountDataMap.GetValueOrDefault(account.Id))"
                         VO="@SettingsManager.GlobalOptions"
                         Status="@(refreshStatus.ContainsKey(account.Id) ? refreshStatus[account.Id] : "Idle")"
                         IsRefreshing="@(isRefreshing.Contains(account.Id))"
                         OnRefreshClicked="@(() => RefreshAccountData(account))"
                         OnDetailsClicked="@(() => ViewDetails(account.Id))" />
        }
    </div>
}

@code {
    private List<MDTadusMod.Data.Account> accounts;
    private Dictionary<Guid, MDTadusMod.Data.AccountData> accountDataMap = new();
    private Dictionary<Guid, string> refreshStatus = new();
    private HashSet<Guid> isRefreshing = new();

    protected override async Task OnInitializedAsync()
    {
        SettingsManager.OnChange += StateHasChanged; // Subscribe to changes
        accounts = await AccountSvc.GetAccountsAsync();
        if (accounts != null)
        {
            foreach (var acc in accounts)
            {
                refreshStatus[acc.Id] = "Idle";
                var data = await AccountSvc.GetAccountDataAsync(acc.Id);
                if (data != null)
                {
                    accountDataMap[acc.Id] = data;
                }
            }
        }
    }

    private void GoToAddAccount()
    {
        NavManager.NavigateTo("/settings/accounts/new");
    }

    private void ViewDetails(Guid accountId)
    {
        NavManager.NavigateTo($"/account-details/{accountId}");
    }

    private async Task RefreshAccountData(MDTadusMod.Data.Account account)
    {
        if (isRefreshing.Contains(account.Id)) return;

        isRefreshing.Add(account.Id);
        refreshStatus[account.Id] = "Refreshing...";
        StateHasChanged();

        try
        {
            // Get the existing data to pass to the service.
            var existingData = accountDataMap.GetValueOrDefault(account.Id);
            var accountData = await RotmgApiSvc.GetAccountDataAsync(account, existingData);
            
            await AccountSvc.SaveAccountDataAsync(accountData);
            accountDataMap[account.Id] = accountData; // Update the map with the result.

            if (accountData.PasswordError)
            {
                refreshStatus[account.Id] = "Password Error";
            }
            else
            {
                refreshStatus[account.Id] = "Success";
                System.Diagnostics.Debug.WriteLine($"Char List for {account.Email} processed.");
            }
        }
        catch (Exception ex)
        {
            refreshStatus[account.Id] = "Error";
            System.Diagnostics.Debug.WriteLine($"Error refreshing account {account.Email}: {ex.Message}");
        }
        finally
        {
            isRefreshing.Remove(account.Id);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        SettingsManager.OnChange -= StateHasChanged; // Unsubscribe to prevent memory leaks
    }
}