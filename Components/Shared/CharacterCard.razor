@using MDTadusMod.Data
@using MDTadusMod.Services
@using RotMGAssetExtractor.Model
@using System.Diagnostics
@inject SettingsService SettingsManager

<div class="char">
    @if (VO.CharDescription)
    {
        <div class="chdesc">
            <SpriteCard Type="@(Character.Skin != 0 ? Character.Skin : Character.ObjectType)" BackgroundOff="true"></SpriteCard>
            <div>
                <div style="padding-top: 3px;">
                    <span class="">@GetClassName(Character.ObjectType) @Character.Level, @(MaxedStats.Count)/8, #@Character.Id</span>
                </div>
                <div>@Character.CurrentFame F @FormatNumber(Character.Exp) XP</div>
            </div>
        </div>
    }

    @if (VO.Stats)
    {
        <table class="stats">
            <tbody>
                <tr>
                    <td class="sname">HP</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("MaxHitPoints") ? "maxed" : "")">@Character.MaxHitPoints</strong></td>
                    <td class="sname">MP</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("MaxMagicPoints") ? "maxed" : "")">@Character.MaxMagicPoints</strong></td>
                </tr>
                <tr>
                    <td class="sname">ATT</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Attack") ? "maxed" : "")">@Character.Attack</strong></td>
                    <td class="sname">DEF</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Defense") ? "maxed" : "")">@Character.Defense</strong></td>
                </tr>
                <tr>
                    <td class="sname">SPD</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Speed") ? "maxed" : "")">@Character.Speed</strong></td>
                    <td class="sname">DEX</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Dexterity") ? "maxed" : "")">@Character.Dexterity</strong></td>
                </tr>
                <tr>
                    <td class="sname">VIT</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Vitality") ? "maxed" : "")">@Character.Vitality</strong></td>
                    <td class="sname">WIS</td>
                    <td><strong class="stat @(MaxedStats.IsMaxed("Wisdom") ? "maxed" : "")">@Character.Wisdom</strong></td>
                </tr>
            </tbody>
        </table>
    }

    @if (VO.Equipment)
    {
        <ItemContainer Items="EquipmentItems"
                       DisplayType="@GetDisplayType(nameof(VO.EquipmentDisplayType))"
                       NoPadding="true" />
    }
    @if (VO.Inventory)
    {
        <ItemContainer Items="InventoryItems"
                       DisplayType="@GetDisplayType(nameof(VO.InventoryDisplayType))"
                       NoPadding="true"/>
    }

    @if (VO.AdditionalStats || VO.AdditionalBonuses)
    {
        <table class="pcstats">
            <tbody>
                @if (VO.AdditionalStats)
                {
                    @foreach (var stat in Character.ParsedPCStats.OrderBy(s => s.Key))
                    {
                        @if (stat.Key == 20)
                        {
                            var timeSpan = TimeSpan.FromMinutes(stat.Value);
                            if (timeSpan.TotalDays >= 1)
                            {
                                <tr>
                                    <td>Days active</td>
                                    <td class="pcstat">@timeSpan.TotalDays.ToString("0.#")</td>
                                </tr>
                            }
                            else if (timeSpan.TotalHours >= 1)
                            {
                                <tr>
                                    <td>Hours active</td>
                                    <td class="pcstat">@timeSpan.TotalHours.ToString("0.#")</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td>Minutes active</td>
                                    <td class="pcstat">@timeSpan.Minutes</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td>@GetPCStatName(stat.Key)</td>
                                <td class="pcstat">@FormatNumber(stat.Value)</td>
                            </tr>
                        }
                    }
                }
                @if ((VO.AdditionalBonuses) && CharacterFameBonuses.TryGetValue(Character.Id, out var bonuses) && bonuses.Any())
                {
                    string currentGroup = null;
                    var renderedCategories = new HashSet<string>();

                    for (int i = 0; i < bonuses.Count; i++)
                    {
                        var bonus = bonuses[i];

                        if (bonus.DisplayGroup != currentGroup)
                        {
                            currentGroup = bonus.DisplayGroup;
                            renderedCategories.Clear();
                            if (!string.IsNullOrEmpty(currentGroup))
                            {
                                <tr>
                                    <td class="bonus-group-header"><strong>@currentGroup</strong></td>
                                    <td></td>
                                </tr>
                            }
                        }

                        if (!string.IsNullOrEmpty(bonus.DisplayCategory))
                        {
                            if (renderedCategories.Add(bonus.DisplayCategory))
                            {
                                var categoryBonuses = bonuses
                                    .Where(b => b.DisplayGroup == currentGroup && b.DisplayCategory == bonus.DisplayCategory)
                                    .ToList();

                                <tr>
                                    <td>@bonus.DisplayCategory</td>
                                    <td class="bonus">+@categoryBonuses.Sum(b => CalculateBonusIncrement(b))</td>
                                </tr>
                            }
                        }
                        else if (VO.AdditionalBonuses)
                        {
                            <tr>
                                <td>@bonus.DisplayName</td>
                                <td class="bonus">+@CalculateBonusIncrement(bonus)</td>
                            </tr>
                        }
                    }
                }
                @if (VO.AdditionalBonuses)
                {
                    <tr>
                        <td><strong>Total Fame</strong></td>
                        <td class="bonus"><strong>@TotalFame</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    [Parameter, EditorRequired]
    public Character Character { get; set; }

    [Parameter, EditorRequired]
    public AccountViewOptions VO { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<int, Dictionary<string, int>> MaxStatsPerClass { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<int, string> ClassIdToNameMap { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<int, string> PCStatIdToNameMap { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<int, List<FameBonus>> CharacterFameBonuses { get; set; }

    private (int Count, Func<string, bool> IsMaxed) MaxedStats;
    private int TotalFame;
    private List<Item> EquipmentItems { get; set; } = new();
    private List<Item> InventoryItems { get; set; } = new();

    protected override void OnParametersSet()
    {
        // Fallback to global settings if account-specific options are not provided.
        if (VO == null)
        {
            VO = SettingsManager.GlobalOptions;
        }

        MaxedStats = GetMaxedStats(Character);

        if (CharacterFameBonuses.TryGetValue(Character.Id, out var bonuses))
        {
            TotalFame = PCStatsParser.CalculateTotalFame(Character.CurrentFame, bonuses);
        }
        else
        {
            TotalFame = Character.CurrentFame;
        }

        // Prepare item lists for the ItemContainer components
        var equipment = Character.EquipmentList ?? new List<Item>();
        EquipmentItems = equipment.Take(4).ToList();
        // Pad equipment to always show 4 slots
        while (EquipmentItems.Count < 4)
        {
            EquipmentItems.Add(new Item { Id = -1 });
        }

        InventoryItems = equipment.Skip(4).ToList();
    }

    private ContainerDisplayType GetDisplayType(string containerPropertyName)
    {
        if (!SettingsManager.GlobalSettings.ShowExtendedItemContainerDisplay)
            return ContainerDisplayType.chest;

        var property = typeof(AccountViewOptions).GetProperty(containerPropertyName);
        if (property != null && property.GetValue(VO) is ContainerDisplayType displayType)
        {
            return displayType;
        }

        return ContainerDisplayType.chest;
    }

    private (int id, int rarity) GetItemDetails(int itemId)
    {
        if (itemId == -1) return (-1, 0);

        var key = itemId.ToString();
        if (Character.UniqueItemData.TryGetValue(key, out var enchantList) && enchantList.Any())
        {
            var enchantData = enchantList.First();
            if (!string.IsNullOrEmpty(enchantData))
            {
                return (itemId, GetEnchantCount(enchantData));
            }
        }
        return (itemId, 0);
    }

    private int GetEnchantCount(string enchantData)
    {
        var enchants = new List<int>();
        if (string.IsNullOrEmpty(enchantData))
        {
            return 0;
        }

        byte[] data = Convert.FromBase64String(enchantData.Replace('-', '+').Replace('_', '/'));
        if (data.Length == 0)
        {
            return 0;
        }

        int index = 0;
        byte version = data[index];
        index++;

        const byte GradeId = 1;
        const byte EnchantmentSlotId = 2;
        const byte EnchantmentListId = 3;
        const byte RerollCountId = 4;
        const byte PowerupInfoId = 5;

        while (index < data.Length)
        {
            byte type = data[index];
            index++;

            switch (type)
            {
                case GradeId:
                    {
                        byte grade = data[index];
                        index++;
                        byte count = data[index];
                        index++;

                        //skip over key mods
                        index += count * sizeof(short);
                        break;
                    }
                case EnchantmentSlotId:
                    {
                        byte count = data[index];
                        index++;

                        for (int i = 0; i < count; i++)
                        {
                            short enchantmentId = BitConverter.ToInt16(data, index);
                            index += sizeof(short);
                            enchants.Add(enchantmentId);
                        }

                        break;
                    }
                case EnchantmentListId:
                    {
                        ushort count = BitConverter.ToUInt16(data, index);
                        index += sizeof(ushort);

                        index += count * sizeof(short);

                        break;
                    }
                case RerollCountId:
                    {
                        byte rerollCount = data[index];
                        index++;
                        break;
                    }
                case PowerupInfoId:
                    {
                        byte count = data[index];
                        index++;
                        for (int i = 0; i < count; i++)
                        {
                            byte id = data[index];
                            index++;
                            ushort value = BitConverter.ToUInt16(data, index);
                            index += sizeof(ushort);
                        }

                        break;
                    }
            }
        }

        return enchants.Count(id => id != -3);
    }

    private int CalculateBonusIncrement(FameBonus bonus)
    {
        // Convert relative bonus from percentage to a multiplier
        double increment = Math.Ceiling(Character.CurrentFame * (bonus.RelativeBonus / 100f));

        // Add the absolute bonus.
        increment += bonus.AbsoluteBonus;

        return (int)increment;
    }

    private string GetClassName(int objectType)
    {
        return ClassIdToNameMap.GetValueOrDefault(objectType, "Unknown");
    }

    private string GetPCStatName(int statId)
    {
        return PCStatIdToNameMap.GetValueOrDefault(statId, $"#{statId}");
    }

    private (int Count, Func<string, bool> IsMaxed) GetMaxedStats(Character character)
    {
        if (character == null || MaxStatsPerClass == null || !MaxStatsPerClass.TryGetValue(character.ObjectType, out var maxStats))
        {
            return (0, s => false);
        }

        var maxed = new Dictionary<string, bool>();
        int maxedCount = 0;

        void CheckStat(string name, int value)
        {
            if (maxStats.TryGetValue(name, out var maxStatValue) && value >= maxStatValue)
            {
                maxed[name] = true;
                maxedCount++;
            }
            else
            {
                maxed[name] = false;
            }
        }

        CheckStat("MaxHitPoints", character.MaxHitPoints);
        CheckStat("MaxMagicPoints", character.MaxMagicPoints);
        CheckStat("Attack", character.Attack);
        CheckStat("Defense", character.Defense);
        CheckStat("Speed", character.Speed);
        CheckStat("Dexterity", character.Dexterity);
        CheckStat("Vitality", character.Vitality);
        CheckStat("Wisdom", character.Wisdom);

        return (maxedCount, s => maxed.GetValueOrDefault(s));
    }

    private string FormatNumber(long num)
    {
        if (num >= 1000000000)
            return (num / 1000000000D).ToString("0") + "B";
        if (num >= 1000000)
            return (num / 1000000D).ToString("0") + "M";
        if (num >= 1000)
            return (num / 1000D).ToString("0") + "K";
        return num.ToString("N0");
    }
}